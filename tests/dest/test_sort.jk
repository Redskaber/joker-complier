//! this file is used test joker-language sorting algorithm.
/**
  *  This file is used to test the sorting algorithm.
  *  @author  redskaber
  *  @version 1.0
 */


class TestSort {
    fn println(arr: Vec<i32>) -> None {
        print("[");
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            print("%d", arr[i]);
            if(i != arr.len() - 1) {
                print(", ");
            }
        }
        println("]");
    }
    fn max(arr: Vec<i32>) -> i32 {
        var max: i32 = arr[0];
        for(var i: i32 = 1; i < arr.len(); i += 1) {
            if(arr[i] > max) {
                max = arr[i];
            }
        }
        return max;
    }
    fn min(arr: Vec<i32>) -> i32 {
        var min: i32 = arr[0];
        for(var i: i32 = 1; i < arr.len(); i += 1) {
            if(arr[i] < min) {
                min = arr[i];
            }
        }
        return min;
    }
    fn assert(arr: Vec<i32>, expected: Vec<i32>) -> bool {
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            if(arr[i] != expected[i]) {
                return false;
            }
        }
        return true;
    }

    fn swap(arr: Vec<i32>, i: i32, j: i32) {
        var temp: i32 = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    fn bubble_sort(arr: Vec<i32>) -> Vec<i32> {
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            for(var j: i32 = 0; j < arr.len() - 1; j += 1) {
                if(arr[j] > arr[j + 1]) {
                    TestSort::swap(arr, j, j + 1);
                }
            }
        }
        return arr;
    }

    fn selection_sort(arr: Vec<i32>) -> Vec<i32> {
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            var min_index: i32 = i;
            for(var j: i32 = i + 1; j < arr.len(); j += 1) {
                if(arr[j] < arr[min_index]) {
                    min_index = j;
                }
            }
            TestSort::swap(arr, i, min_index);
        }
        return arr;
    }

    fn insertion_sort(arr: Vec<i32>) -> Vec<i32> {
        for(var i: i32 = 1; i < arr.len(); i += 1) {
            var key: i32 = arr[i];
            var j: i32 = i - 1;
            while(j >= 0 and arr[j] > key) {
                arr[j + 1] = arr[j];
                j -= 1;
            }
            arr[j + 1] = key;
        }
        return arr;
    }
    fn shell_sort(arr: Vec<i32>) -> Vec<i32> {
        var len: i32 = arr.len();
        var group: i32 = 1;
        while(group < len / 3) {
            group = 3 * group + 1;
        }

        while group > 0 {
            for(var i: i32 = group; i < len; i += 1) {
                var temp: i32 = arr[i];
                var j: i32 = i;
                while(j >= group and arr[j - group] > temp) {
                    arr[j] = arr[j - group];
                    j -= group;
                }
                arr[j] = temp;
            }
            group = group / 3;
        }

        return arr;
    }

    fn slice(arr: Vec<i32>, start: i32, end: i32) -> Vec<i32> {
        var result: Vec<i32> = [];
        for(var i: i32 = start; i < end; i += 1) {
            result.push(arr[i]);
        }
        return result;
    }
    fn merge_sort(arr: Vec<i32>) -> Vec<i32> {
        var len: i32 = arr.len();
        if (len <= 1) {
            return arr;
        }
        var mid: i32 = len / 2;
        // TODO: Need impl vec[]  slice
        var left: Vec<i32> = TestSort::slice(arr, 0, mid);
        var right: Vec<i32> = TestSort::slice(arr, mid, len);
        return TestSort::merge(TestSort::merge_sort(left), TestSort::merge_sort(right));
    }
    fn merge(left: Vec<i32>, right: Vec<i32>) -> Vec<i32> {
        var result: Vec<i32> = [];
        var i: i32 = 0;
        var j: i32 = 0;
        while(i < left.len() and j < right.len()) {
            if(left[i] < right[j]) {
                result.push(left[i]);
                i += 1;
            } else {
                result.push(right[j]);
                j += 1;
            }
        }
        while(i < left.len()) {
            result.push(left[i]);
            i += 1;
        }
        while(j < right.len()) {
            result.push(right[j]);
            j += 1;
        }
        return result;
    }

    fn quick_sort(arr: Vec<i32>) -> Vec<i32> {
        var len: i32 = arr.len();
        if (len <= 1) {
            return arr;
        }
        return TestSort::_quick_sort(arr, 0, len - 1);
    }
    fn _quick_sort(arr: Vec<i32>, low: i32, high: i32) -> Vec<i32> {
        if low < high {
            var part_index: i32 = TestSort::partition(arr, low, high);
            TestSort::_quick_sort(arr, low, part_index - 1);
            TestSort::_quick_sort(arr, part_index + 1, high);
        }
        return arr;
    }
    fn partition(arr: Vec<i32>, low: i32, high: i32) -> i32 {
        var pivot: i32 = low;
        var slow: i32 = pivot + 1;
        var quick: i32 = slow;
        while slow <= high { 
            if arr[slow] < arr[pivot] {
                TestSort::swap(arr, slow, quick);
                quick += 1;
            }
            slow += 1;
        }
        TestSort::swap(arr, pivot, quick - 1);
        return quick - 1;
    }

    fn max_heap(arr: Vec<i32>, len: i32, i: i32) -> Vec<i32> {
        var largest: i32 = i;
        var left: i32 = 2 * i + 1;
        var right: i32 = 2 * i + 2;
        if left < len and arr[left] > arr[largest] {
            largest = left;
        }
        if right < len and arr[right] > arr[largest] {
            largest = right;
        }
        if largest != i {
            TestSort::swap(arr, i, largest);
            TestSort::max_heap(arr, len, largest);
        }
    }
    fn heap_sort(arr: Vec<i32>) -> Vec<i32> {
        var len: i32 = arr.len();
        for(var i: i32 = len / 2 - 1; i >= 0; i -= 1) {
            TestSort::max_heap(arr, len, i);
        }
        for(var i: i32 = len - 1; i >= 0; i -= 1) {
            TestSort::swap(arr, 0, i);
            TestSort::max_heap(arr, i, 0);
        }
        return arr;
    }
    
    // TODO: vec[index] += n impl
    fn counting_sort(arr: Vec<i32>) -> Vec<i32> { 
        var max: i32 = TestSort::max(arr);
        var count: Vec<i32> = [];
        var result: Vec<i32> = [];
        for(var i: i32 = 0; i < max + 1; i += 1) {
            count.push(0);
        }
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            count[arr[i]] = count[arr[i]] + 1;
        }
        for(var i: i32 = 0; i < count.len(); i += 1) {
            for(var j: i32 = 0; j < count[i]; j += 1) {
                result.push(i);
            }
        }
        return result;
    }

    fn bucket_sort(arr: Vec<i32>) -> Vec<i32> {
        if arr.len() == 0 { 
            return arr;
        }
        var min: i32 = TestSort::min(arr);
        var max: i32 = TestSort::max(arr);
        var bucket_size: i32 = max - min + 1;
        var bucket: Vec<Vec<i32>> = [];
        for(var i: i32 = 0; i < bucket_size; i += 1) {
            bucket.push([]);
        }
        for(var i: i32 = 0; i < arr.len(); i += 1) {
            bucket[arr[i] - min].push(arr[i]);
        }
        var result: Vec<i32> = [];
        for(var i: i32 = 0; i < bucket.len(); i += 1) {
            result = TestSort::merge(result, TestSort::merge_sort(bucket[i]));
        }
        return result;
    }

    fn radix_sort(arr: Vec<i32>) -> Vec<i32> { 
        if arr.len() == 0 {
            return arr;
        }
        var min: i32 = TestSort::min(arr);
        var offset: i32 = 0;
        var adjusted_arr: Vec<i32> = arr;
        if min < 0 {
            offset = -min;
            adjusted_arr = [];
            for(var i: i32 = 0; i < arr.len(); i += 1) {
                adjusted_arr.push(arr[i] + offset);
            }
        }
        var max: i32 = TestSort::max(adjusted_arr);
        var divisor: i32 = 1;

        while max / divisor > 0 { 
            var count: Vec<i32> = [];
            for(var i: i32 = 0; i < adjusted_arr.len(); i += 1) {
                count.push(0);
            }
            for(var i: i32 = 0; i < adjusted_arr.len(); i += 1) {
                var digit: i32 = (adjusted_arr[i] / divisor) % 10;
                count[digit] = count[digit] + 1;
            }
            for(var i: i32 = 1; i < 10; i += 1) {
                count[i] = count[i] + count[i - 1];
            }
            var temp: Vec<i32> = [];
            for(var i: i32 = 0; i < adjusted_arr.len(); i += 1) {
                temp.push(0);
            }
            for(var i: i32 = adjusted_arr.len() - 1; i >= 0; i -= 1) {
                var digit: i32 = (adjusted_arr[i] / divisor) % 10;
                temp[count[digit] - 1] = adjusted_arr[i];
                count[digit] = count[digit] - 1;
            }
            adjusted_arr = temp;
            divisor *= 10;
        }

        if offset > 0 {
            for(var i: i32 = 0; i < adjusted_arr.len(); i += 1) {
                adjusted_arr[i] = adjusted_arr[i] - offset;
            }
        }
        return adjusted_arr;
    }
}

class CallSort {
    fn bubble_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::bubble_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn selection_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::selection_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn insertion_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::insertion_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn shell_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::shell_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn merge_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::merge_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn quick_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::quick_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    }
    fn heap_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::heap_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5,6, 7, 8, 9, 10]);
    }
    fn counting_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::counting_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5,6, 7, 8, 9, 10]);
    }
    fn bucket_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::bucket_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5,6, 7, 8, 9, 10]);
    }
    fn radix_sort() -> bool {
        var arr: Vec<i32> = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
        var result: Vec<i32> = TestSort::radix_sort(arr);
        TestSort::println(result);
        return TestSort::assert(result, [1, 2, 3, 4, 5,6, 7, 8, 9, 10]);
    }
}

fn main() {
    match  CallSort::bubble_sort() {
        true => println("[bubble_sort] Success"),
        false => println("[bubble_sort] Failed")
    }
    match  CallSort::selection_sort() {
        true => println("[selection_sort] Success"),
        false => println("[selection_sort] Failed")
    }
    match  CallSort::insertion_sort() {
        true => println("[insertion_sort] Success"),
        false => println("[insertion_sort] Failed")
    }
    match  CallSort::shell_sort() {
        true => println("[shell_sort] Success"),
        false => println("[shell_sort] Failed")
    }
    match  CallSort::merge_sort() {
        true => println("[merge_sort] Success"),
        false => println("[merge_sort] Failed")
    }
    match  CallSort::quick_sort() {
        true => println("[quick_sort] Success"),
        false => println("[quick_sort] Failed")
    }
    match  CallSort::heap_sort() {
        true => println("[heap_sort] Success"),
        false => println("[heap_sort] Failed")
    }
    match  CallSort::counting_sort() {
        true => println("[counting_sort] Success"),
        false => println("[counting_sort] Failed")
    }
    match  CallSort::bucket_sort() {
        true => println("[bucket_sort] Success"),
        false => println("[bucket_sort] Failed")
    }
    match  CallSort::radix_sort() {
        true => println("[radix_sort] Success"),
        false => println("[radix_sort] Failed")
    }
}


main();
